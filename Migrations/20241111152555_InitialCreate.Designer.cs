// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebPayroll.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241111152555_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("WebPayroll.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentOtpCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OtpExpiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.HasIndex("EmpId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebPayroll.Models.Bank", b =>
                {
                    b.Property<string>("BankId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("WebPayroll.Models.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WebPayroll.Models.Company", b =>
                {
                    b.Property<string>("CmpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CmpName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RekBankId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RekeningBankRekBankId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CmpId");

                    b.HasIndex("CityId");

                    b.HasIndex("RekeningBankRekBankId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WebPayroll.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebPayroll.Models.Department", b =>
                {
                    b.Property<string>("DeptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeptId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WebPayroll.Models.DetailPayroll", b =>
                {
                    b.Property<int>("DetPayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("PayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("DetPayId");

                    b.HasIndex("PayId");

                    b.ToTable("DetailPayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Employee", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CmpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PositionPosId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RekBankId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmpId");

                    b.HasIndex("CityId");

                    b.HasIndex("CmpId");

                    b.HasIndex("PositionPosId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WebPayroll.Models.Logs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("SessionId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WebPayroll.Models.Payroll", b =>
                {
                    b.Property<int>("PayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CmpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyCmpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RekeningBankRekBankId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScdId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PayId");

                    b.HasIndex("CompanyCmpId");

                    b.HasIndex("EmpId");

                    b.HasIndex("RekeningBankRekBankId");

                    b.HasIndex("ScdId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Position", b =>
                {
                    b.Property<string>("PosId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PosId");

                    b.HasIndex("DeptId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("WebPayroll.Models.RekeningBank", b =>
                {
                    b.Property<string>("RekBankId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ActiveStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("TEXT");

                    b.HasKey("RekBankId");

                    b.HasIndex("BankId");

                    b.ToTable("RekeningBanks");
                });

            modelBuilder.Entity("WebPayroll.Models.RetryPayroll", b =>
                {
                    b.Property<int>("RetryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetPayId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RetryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RetryStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("RetryId");

                    b.HasIndex("DetPayId");

                    b.ToTable("RetryPayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.SchedulePayroll", b =>
                {
                    b.Property<int>("ScdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CmpId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PayrollDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PayrollFrekens")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScdId");

                    b.HasIndex("CmpId");

                    b.HasIndex("CountryId");

                    b.ToTable("SchedulePayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Activities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebPayroll.Models.Account", b =>
                {
                    b.HasOne("WebPayroll.Models.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("WebPayroll.Models.Account", "EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WebPayroll.Models.City", b =>
                {
                    b.HasOne("WebPayroll.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebPayroll.Models.Company", b =>
                {
                    b.HasOne("WebPayroll.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.RekeningBank", "RekeningBank")
                        .WithMany("Companies")
                        .HasForeignKey("RekeningBankRekBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("RekeningBank");
                });

            modelBuilder.Entity("WebPayroll.Models.DetailPayroll", b =>
                {
                    b.HasOne("WebPayroll.Models.Payroll", "Payroll")
                        .WithMany("DetailPayrolls")
                        .HasForeignKey("PayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("WebPayroll.Models.Employee", b =>
                {
                    b.HasOne("WebPayroll.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionPosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WebPayroll.Models.Logs", b =>
                {
                    b.HasOne("WebPayroll.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebPayroll.Models.Payroll", b =>
                {
                    b.HasOne("WebPayroll.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCmpId");

                    b.HasOne("WebPayroll.Models.Employee", "Employee")
                        .WithMany("Payrolls")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.RekeningBank", null)
                        .WithMany("Payrolls")
                        .HasForeignKey("RekeningBankRekBankId");

                    b.HasOne("WebPayroll.Models.SchedulePayroll", "SchedulePayroll")
                        .WithMany("Payrolls")
                        .HasForeignKey("ScdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("SchedulePayroll");
                });

            modelBuilder.Entity("WebPayroll.Models.Position", b =>
                {
                    b.HasOne("WebPayroll.Models.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WebPayroll.Models.RekeningBank", b =>
                {
                    b.HasOne("WebPayroll.Models.Bank", "Bank")
                        .WithMany("RekeningBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("WebPayroll.Models.RetryPayroll", b =>
                {
                    b.HasOne("WebPayroll.Models.DetailPayroll", "DetailPayroll")
                        .WithMany("RetryPayrolls")
                        .HasForeignKey("DetPayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailPayroll");
                });

            modelBuilder.Entity("WebPayroll.Models.SchedulePayroll", b =>
                {
                    b.HasOne("WebPayroll.Models.Company", "Company")
                        .WithMany("SchedulePayrolls")
                        .HasForeignKey("CmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPayroll.Models.Country", null)
                        .WithMany("SchedulePayrolls")
                        .HasForeignKey("CountryId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("WebPayroll.Models.Session", b =>
                {
                    b.HasOne("WebPayroll.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebPayroll.Models.Bank", b =>
                {
                    b.Navigation("RekeningBanks");
                });

            modelBuilder.Entity("WebPayroll.Models.City", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("WebPayroll.Models.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SchedulePayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("SchedulePayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("WebPayroll.Models.DetailPayroll", b =>
                {
                    b.Navigation("RetryPayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Employee", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Payrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.Payroll", b =>
                {
                    b.Navigation("DetailPayrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.RekeningBank", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Payrolls");
                });

            modelBuilder.Entity("WebPayroll.Models.SchedulePayroll", b =>
                {
                    b.Navigation("Payrolls");
                });
#pragma warning restore 612, 618
        }
    }
}
